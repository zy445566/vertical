//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./vertical_types');
//HELPER FUNCTIONS AND STRUCTURES

var Vertical_ping_args = function(args) {
};
Vertical_ping_args.prototype = {};
Vertical_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Vertical_ping_args.prototype.write = function(output) {
  output.writeStructBegin('Vertical_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Vertical_ping_result = function(args) {
};
Vertical_ping_result.prototype = {};
Vertical_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Vertical_ping_result.prototype.write = function(output) {
  output.writeStructBegin('Vertical_ping_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Vertical_getRow_args = function(args) {
  this.data_key = null;
  if (args) {
    if (args.data_key !== undefined && args.data_key !== null) {
      this.data_key = new ttypes.DataKey(args.data_key);
    }
  }
};
Vertical_getRow_args.prototype = {};
Vertical_getRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.data_key = new ttypes.DataKey();
        this.data_key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Vertical_getRow_args.prototype.write = function(output) {
  output.writeStructBegin('Vertical_getRow_args');
  if (this.data_key !== null && this.data_key !== undefined) {
    output.writeFieldBegin('data_key', Thrift.Type.STRUCT, 1);
    this.data_key.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Vertical_getRow_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Vertical_getRow_result.prototype = {};
Vertical_getRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Vertical_getRow_result.prototype.write = function(output) {
  output.writeStructBegin('Vertical_getRow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Vertical_updateRow_args = function(args) {
  this.data_key = null;
  this.row_value = null;
  if (args) {
    if (args.data_key !== undefined && args.data_key !== null) {
      this.data_key = new ttypes.DataKey(args.data_key);
    }
    if (args.row_value !== undefined && args.row_value !== null) {
      this.row_value = args.row_value;
    }
  }
};
Vertical_updateRow_args.prototype = {};
Vertical_updateRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.data_key = new ttypes.DataKey();
        this.data_key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row_value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Vertical_updateRow_args.prototype.write = function(output) {
  output.writeStructBegin('Vertical_updateRow_args');
  if (this.data_key !== null && this.data_key !== undefined) {
    output.writeFieldBegin('data_key', Thrift.Type.STRUCT, 1);
    this.data_key.write(output);
    output.writeFieldEnd();
  }
  if (this.row_value !== null && this.row_value !== undefined) {
    output.writeFieldBegin('row_value', Thrift.Type.STRING, 2);
    output.writeString(this.row_value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Vertical_updateRow_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Vertical_updateRow_result.prototype = {};
Vertical_updateRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Vertical_updateRow_result.prototype.write = function(output) {
  output.writeStructBegin('Vertical_updateRow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Vertical_insertRow_args = function(args) {
  this.data_key_gen = null;
  this.row_value = null;
  if (args) {
    if (args.data_key_gen !== undefined && args.data_key_gen !== null) {
      this.data_key_gen = new ttypes.DataKeyGen(args.data_key_gen);
    }
    if (args.row_value !== undefined && args.row_value !== null) {
      this.row_value = args.row_value;
    }
  }
};
Vertical_insertRow_args.prototype = {};
Vertical_insertRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.data_key_gen = new ttypes.DataKeyGen();
        this.data_key_gen.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row_value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Vertical_insertRow_args.prototype.write = function(output) {
  output.writeStructBegin('Vertical_insertRow_args');
  if (this.data_key_gen !== null && this.data_key_gen !== undefined) {
    output.writeFieldBegin('data_key_gen', Thrift.Type.STRUCT, 1);
    this.data_key_gen.write(output);
    output.writeFieldEnd();
  }
  if (this.row_value !== null && this.row_value !== undefined) {
    output.writeFieldBegin('row_value', Thrift.Type.STRING, 2);
    output.writeString(this.row_value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Vertical_insertRow_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Vertical_insertRow_result.prototype = {};
Vertical_insertRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Vertical_insertRow_result.prototype.write = function(output) {
  output.writeStructBegin('Vertical_insertRow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Vertical_delRow_args = function(args) {
  this.data_key = null;
  if (args) {
    if (args.data_key !== undefined && args.data_key !== null) {
      this.data_key = new ttypes.DataKey(args.data_key);
    }
  }
};
Vertical_delRow_args.prototype = {};
Vertical_delRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.data_key = new ttypes.DataKey();
        this.data_key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Vertical_delRow_args.prototype.write = function(output) {
  output.writeStructBegin('Vertical_delRow_args');
  if (this.data_key !== null && this.data_key !== undefined) {
    output.writeFieldBegin('data_key', Thrift.Type.STRUCT, 1);
    this.data_key.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Vertical_delRow_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Vertical_delRow_result.prototype = {};
Vertical_delRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Vertical_delRow_result.prototype.write = function(output) {
  output.writeStructBegin('Vertical_delRow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Vertical_getColumn_args = function(args) {
  this.data_column_key = null;
  this.data_column_option = null;
  if (args) {
    if (args.data_column_key !== undefined && args.data_column_key !== null) {
      this.data_column_key = new ttypes.DataColumnKey(args.data_column_key);
    }
    if (args.data_column_option !== undefined && args.data_column_option !== null) {
      this.data_column_option = new ttypes.DataColumnOption(args.data_column_option);
    }
  }
};
Vertical_getColumn_args.prototype = {};
Vertical_getColumn_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.data_column_key = new ttypes.DataColumnKey();
        this.data_column_key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data_column_option = new ttypes.DataColumnOption();
        this.data_column_option.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Vertical_getColumn_args.prototype.write = function(output) {
  output.writeStructBegin('Vertical_getColumn_args');
  if (this.data_column_key !== null && this.data_column_key !== undefined) {
    output.writeFieldBegin('data_column_key', Thrift.Type.STRUCT, 1);
    this.data_column_key.write(output);
    output.writeFieldEnd();
  }
  if (this.data_column_option !== null && this.data_column_option !== undefined) {
    output.writeFieldBegin('data_column_option', Thrift.Type.STRUCT, 2);
    this.data_column_option.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Vertical_getColumn_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Vertical_getColumn_result.prototype = {};
Vertical_getColumn_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Vertical_getColumn_result.prototype.write = function(output) {
  output.writeStructBegin('Vertical_getColumn_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Vertical_delColumn_args = function(args) {
  this.data_column_key = null;
  this.data_column_option = null;
  if (args) {
    if (args.data_column_key !== undefined && args.data_column_key !== null) {
      this.data_column_key = new ttypes.DataColumnKey(args.data_column_key);
    }
    if (args.data_column_option !== undefined && args.data_column_option !== null) {
      this.data_column_option = new ttypes.DataColumnOption(args.data_column_option);
    }
  }
};
Vertical_delColumn_args.prototype = {};
Vertical_delColumn_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.data_column_key = new ttypes.DataColumnKey();
        this.data_column_key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data_column_option = new ttypes.DataColumnOption();
        this.data_column_option.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Vertical_delColumn_args.prototype.write = function(output) {
  output.writeStructBegin('Vertical_delColumn_args');
  if (this.data_column_key !== null && this.data_column_key !== undefined) {
    output.writeFieldBegin('data_column_key', Thrift.Type.STRUCT, 1);
    this.data_column_key.write(output);
    output.writeFieldEnd();
  }
  if (this.data_column_option !== null && this.data_column_option !== undefined) {
    output.writeFieldBegin('data_column_option', Thrift.Type.STRUCT, 2);
    this.data_column_option.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Vertical_delColumn_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Vertical_delColumn_result.prototype = {};
Vertical_delColumn_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Vertical_delColumn_result.prototype.write = function(output) {
  output.writeStructBegin('Vertical_delColumn_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Vertical_updateColum_args = function(args) {
  this.data_column_key = null;
  this.row_value = null;
  this.data_column_option = null;
  if (args) {
    if (args.data_column_key !== undefined && args.data_column_key !== null) {
      this.data_column_key = new ttypes.DataColumnKey(args.data_column_key);
    }
    if (args.row_value !== undefined && args.row_value !== null) {
      this.row_value = args.row_value;
    }
    if (args.data_column_option !== undefined && args.data_column_option !== null) {
      this.data_column_option = new ttypes.DataColumnOption(args.data_column_option);
    }
  }
};
Vertical_updateColum_args.prototype = {};
Vertical_updateColum_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.data_column_key = new ttypes.DataColumnKey();
        this.data_column_key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row_value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.data_column_option = new ttypes.DataColumnOption();
        this.data_column_option.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Vertical_updateColum_args.prototype.write = function(output) {
  output.writeStructBegin('Vertical_updateColum_args');
  if (this.data_column_key !== null && this.data_column_key !== undefined) {
    output.writeFieldBegin('data_column_key', Thrift.Type.STRUCT, 1);
    this.data_column_key.write(output);
    output.writeFieldEnd();
  }
  if (this.row_value !== null && this.row_value !== undefined) {
    output.writeFieldBegin('row_value', Thrift.Type.STRING, 2);
    output.writeString(this.row_value);
    output.writeFieldEnd();
  }
  if (this.data_column_option !== null && this.data_column_option !== undefined) {
    output.writeFieldBegin('data_column_option', Thrift.Type.STRUCT, 3);
    this.data_column_option.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Vertical_updateColum_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Vertical_updateColum_result.prototype = {};
Vertical_updateColum_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Vertical_updateColum_result.prototype.write = function(output) {
  output.writeStructBegin('Vertical_updateColum_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Vertical_insertColum_args = function(args) {
  this.data_column_key = null;
  this.row_value_list = null;
  if (args) {
    if (args.data_column_key !== undefined && args.data_column_key !== null) {
      this.data_column_key = new ttypes.DataColumnKey(args.data_column_key);
    }
    if (args.row_value_list !== undefined && args.row_value_list !== null) {
      this.row_value_list = args.row_value_list;
    }
  }
};
Vertical_insertColum_args.prototype = {};
Vertical_insertColum_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.data_column_key = new ttypes.DataColumnKey();
        this.data_column_key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.row_value_list = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Vertical_insertColum_args.prototype.write = function(output) {
  output.writeStructBegin('Vertical_insertColum_args');
  if (this.data_column_key !== null && this.data_column_key !== undefined) {
    output.writeFieldBegin('data_column_key', Thrift.Type.STRUCT, 1);
    this.data_column_key.write(output);
    output.writeFieldEnd();
  }
  if (this.row_value_list !== null && this.row_value_list !== undefined) {
    output.writeFieldBegin('row_value_list', Thrift.Type.STRING, 3);
    output.writeString(this.row_value_list);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Vertical_insertColum_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Vertical_insertColum_result.prototype = {};
Vertical_insertColum_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Vertical_insertColum_result.prototype.write = function(output) {
  output.writeStructBegin('Vertical_insertColum_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VerticalClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
VerticalClient.prototype = {};
VerticalClient.prototype.seqid = function() { return this._seqid; };
VerticalClient.prototype.new_seqid = function() { return this._seqid += 1; };
VerticalClient.prototype.ping = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ping();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ping();
  }
};

VerticalClient.prototype.send_ping = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid());
  var args = new Vertical_ping_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VerticalClient.prototype.recv_ping = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Vertical_ping_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};
VerticalClient.prototype.getRow = function(data_key, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRow(data_key);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRow(data_key);
  }
};

VerticalClient.prototype.send_getRow = function(data_key) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRow', Thrift.MessageType.CALL, this.seqid());
  var args = new Vertical_getRow_args();
  args.data_key = data_key;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VerticalClient.prototype.recv_getRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Vertical_getRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRow failed: unknown result');
};
VerticalClient.prototype.updateRow = function(data_key, row_value, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateRow(data_key, row_value);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateRow(data_key, row_value);
  }
};

VerticalClient.prototype.send_updateRow = function(data_key, row_value) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateRow', Thrift.MessageType.CALL, this.seqid());
  var args = new Vertical_updateRow_args();
  args.data_key = data_key;
  args.row_value = row_value;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VerticalClient.prototype.recv_updateRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Vertical_updateRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateRow failed: unknown result');
};
VerticalClient.prototype.insertRow = function(data_key_gen, row_value, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_insertRow(data_key_gen, row_value);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_insertRow(data_key_gen, row_value);
  }
};

VerticalClient.prototype.send_insertRow = function(data_key_gen, row_value) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('insertRow', Thrift.MessageType.CALL, this.seqid());
  var args = new Vertical_insertRow_args();
  args.data_key_gen = data_key_gen;
  args.row_value = row_value;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VerticalClient.prototype.recv_insertRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Vertical_insertRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('insertRow failed: unknown result');
};
VerticalClient.prototype.delRow = function(data_key, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_delRow(data_key);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_delRow(data_key);
  }
};

VerticalClient.prototype.send_delRow = function(data_key) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('delRow', Thrift.MessageType.CALL, this.seqid());
  var args = new Vertical_delRow_args();
  args.data_key = data_key;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VerticalClient.prototype.recv_delRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Vertical_delRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('delRow failed: unknown result');
};
VerticalClient.prototype.getColumn = function(data_column_key, data_column_option, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getColumn(data_column_key, data_column_option);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getColumn(data_column_key, data_column_option);
  }
};

VerticalClient.prototype.send_getColumn = function(data_column_key, data_column_option) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getColumn', Thrift.MessageType.CALL, this.seqid());
  var args = new Vertical_getColumn_args();
  args.data_column_key = data_column_key;
  args.data_column_option = data_column_option;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VerticalClient.prototype.recv_getColumn = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Vertical_getColumn_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getColumn failed: unknown result');
};
VerticalClient.prototype.delColumn = function(data_column_key, data_column_option, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_delColumn(data_column_key, data_column_option);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_delColumn(data_column_key, data_column_option);
  }
};

VerticalClient.prototype.send_delColumn = function(data_column_key, data_column_option) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('delColumn', Thrift.MessageType.CALL, this.seqid());
  var args = new Vertical_delColumn_args();
  args.data_column_key = data_column_key;
  args.data_column_option = data_column_option;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VerticalClient.prototype.recv_delColumn = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Vertical_delColumn_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('delColumn failed: unknown result');
};
VerticalClient.prototype.updateColum = function(data_column_key, row_value, data_column_option, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateColum(data_column_key, row_value, data_column_option);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateColum(data_column_key, row_value, data_column_option);
  }
};

VerticalClient.prototype.send_updateColum = function(data_column_key, row_value, data_column_option) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateColum', Thrift.MessageType.CALL, this.seqid());
  var args = new Vertical_updateColum_args();
  args.data_column_key = data_column_key;
  args.row_value = row_value;
  args.data_column_option = data_column_option;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VerticalClient.prototype.recv_updateColum = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Vertical_updateColum_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateColum failed: unknown result');
};
VerticalClient.prototype.insertColum = function(data_column_key, row_value_list, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_insertColum(data_column_key, row_value_list);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_insertColum(data_column_key, row_value_list);
  }
};

VerticalClient.prototype.send_insertColum = function(data_column_key, row_value_list) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('insertColum', Thrift.MessageType.CALL, this.seqid());
  var args = new Vertical_insertColum_args();
  args.data_column_key = data_column_key;
  args.row_value_list = row_value_list;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VerticalClient.prototype.recv_insertColum = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Vertical_insertColum_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('insertColum failed: unknown result');
};
var VerticalProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
VerticalProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
VerticalProcessor.prototype.process_ping = function(seqid, input, output) {
  var args = new Vertical_ping_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ping.length === 0) {
    Q.fcall(this._handler.ping)
      .then(function(result) {
        var result_obj = new Vertical_ping_result({success: result});
        output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ping", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.ping(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Vertical_ping_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ping", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VerticalProcessor.prototype.process_getRow = function(seqid, input, output) {
  var args = new Vertical_getRow_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRow.length === 1) {
    Q.fcall(this._handler.getRow, args.data_key)
      .then(function(result) {
        var result_obj = new Vertical_getRow_result({success: result});
        output.writeMessageBegin("getRow", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRow", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRow(args.data_key, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Vertical_getRow_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRow", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VerticalProcessor.prototype.process_updateRow = function(seqid, input, output) {
  var args = new Vertical_updateRow_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateRow.length === 2) {
    Q.fcall(this._handler.updateRow, args.data_key, args.row_value)
      .then(function(result) {
        var result_obj = new Vertical_updateRow_result({success: result});
        output.writeMessageBegin("updateRow", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateRow", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateRow(args.data_key, args.row_value, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Vertical_updateRow_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateRow", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateRow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VerticalProcessor.prototype.process_insertRow = function(seqid, input, output) {
  var args = new Vertical_insertRow_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.insertRow.length === 2) {
    Q.fcall(this._handler.insertRow, args.data_key_gen, args.row_value)
      .then(function(result) {
        var result_obj = new Vertical_insertRow_result({success: result});
        output.writeMessageBegin("insertRow", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("insertRow", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.insertRow(args.data_key_gen, args.row_value, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Vertical_insertRow_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("insertRow", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("insertRow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VerticalProcessor.prototype.process_delRow = function(seqid, input, output) {
  var args = new Vertical_delRow_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.delRow.length === 1) {
    Q.fcall(this._handler.delRow, args.data_key)
      .then(function(result) {
        var result_obj = new Vertical_delRow_result({success: result});
        output.writeMessageBegin("delRow", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("delRow", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.delRow(args.data_key, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Vertical_delRow_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("delRow", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("delRow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VerticalProcessor.prototype.process_getColumn = function(seqid, input, output) {
  var args = new Vertical_getColumn_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getColumn.length === 2) {
    Q.fcall(this._handler.getColumn, args.data_column_key, args.data_column_option)
      .then(function(result) {
        var result_obj = new Vertical_getColumn_result({success: result});
        output.writeMessageBegin("getColumn", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getColumn", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getColumn(args.data_column_key, args.data_column_option, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Vertical_getColumn_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getColumn", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getColumn", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VerticalProcessor.prototype.process_delColumn = function(seqid, input, output) {
  var args = new Vertical_delColumn_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.delColumn.length === 2) {
    Q.fcall(this._handler.delColumn, args.data_column_key, args.data_column_option)
      .then(function(result) {
        var result_obj = new Vertical_delColumn_result({success: result});
        output.writeMessageBegin("delColumn", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("delColumn", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.delColumn(args.data_column_key, args.data_column_option, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Vertical_delColumn_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("delColumn", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("delColumn", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VerticalProcessor.prototype.process_updateColum = function(seqid, input, output) {
  var args = new Vertical_updateColum_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateColum.length === 3) {
    Q.fcall(this._handler.updateColum, args.data_column_key, args.row_value, args.data_column_option)
      .then(function(result) {
        var result_obj = new Vertical_updateColum_result({success: result});
        output.writeMessageBegin("updateColum", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateColum", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateColum(args.data_column_key, args.row_value, args.data_column_option, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Vertical_updateColum_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateColum", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateColum", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VerticalProcessor.prototype.process_insertColum = function(seqid, input, output) {
  var args = new Vertical_insertColum_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.insertColum.length === 2) {
    Q.fcall(this._handler.insertColum, args.data_column_key, args.row_value_list)
      .then(function(result) {
        var result_obj = new Vertical_insertColum_result({success: result});
        output.writeMessageBegin("insertColum", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("insertColum", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.insertColum(args.data_column_key, args.row_value_list, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Vertical_insertColum_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("insertColum", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("insertColum", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
